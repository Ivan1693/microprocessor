<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE abiword PUBLIC "-//ABISOURCE//DTD AWML 1.0 Strict//EN" "http://www.abisource.com/awml.dtd">
<abiword template="false" xmlns:ct="http://www.abisource.com/changetracking.dtd" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:math="http://www.w3.org/1998/Math/MathML" xid-max="24" xmlns:dc="http://purl.org/dc/elements/1.1/" styles="unlocked" fileformat="1.1" xmlns:svg="http://www.w3.org/2000/svg" xmlns:awml="http://www.abisource.com/awml.dtd" xmlns="http://www.abisource.com/awml.dtd" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.9.1" xml:space="preserve" props="dom-dir:ltr; document-footnote-restart-section:0; document-endnote-type:numeric; document-endnote-place-enddoc:1; document-endnote-initial:1; lang:es-MX; document-endnote-restart-section:0; document-footnote-restart-page:0; document-footnote-type:numeric; document-footnote-initial:1; document-endnote-place-endsection:0">
<!-- ======================================================================== -->
<!-- This file is an AbiWord document.                                        -->
<!-- AbiWord is a free, Open Source word processor.                           -->
<!-- More information about AbiWord is available at http://www.abisource.com/ -->
<!-- You should not edit this file by hand.                                   -->
<!-- ======================================================================== -->

<metadata>
<m key="abiword.date_last_changed">Wed Feb  5 16:13:50 2020
</m>
<m key="abiword.generator">AbiWord</m>
<m key="dc.creator">ivan</m>
<m key="dc.date">Wed Feb  5 14:38:01 2020
</m>
<m key="dc.format">application/x-abiword</m>
</metadata>
<rdf>
</rdf>
<history version="3" edit-time="6695" last-saved="1580940830" uid="32fb855e-4855-11ea-8d61-9698d4ab9d04">
<version id="3" started="1580935081" uid="c97e0e66-4864-11ea-8d61-9698d4ab9d04" auto="0" top-xid="18"/>
</history>
<styles>
<s type="P" name="Normal" followedby="Current Settings" props="font-family:Times New Roman; margin-top:0pt; color:000000; margin-left:0pt; text-position:normal; widows:2; font-style:normal; text-indent:0in; font-variant:normal; font-weight:normal; margin-right:0pt; font-size:12pt; text-decoration:none; margin-bottom:0pt; line-height:1.0; bgcolor:transparent; text-align:left; font-stretch:normal"/>
</styles>
<pagesize pagetype="A4" orientation="portrait" width="8.267717" height="11.692913" units="in" page-scale="1.000000"/>
<section xid="3" props="page-margin-footer:0.5000in; page-margin-header:0.5000in; page-margin-right:1.0000in; page-margin-left:1.0000in; page-margin-top:1.0000in; page-margin-bottom:1.0000in">
<p style="Normal" xid="4"><c>Fases de un compilador<br/></c></p>
<p style="Normal" xid="2"><c>El proceso que lleva a cabo un compilador para pasar de un programa escrito en algún lenguaje de programación de alto/medio nivel, a un lenguaje que pueda ser ejecutado y entendido a nivel bajo por el hardware de una computadora, se puede dividir en una secuencia de pasos o fases como se describe en la Fig.1. Dicha estructura representa la arquitectura básica de un compilador, observamos que esta se divide en una etapa de análisis y una de síntesis. Ambas etapas hacen uso de una tabla de símbolos a lo largo de todo el proceso y para el caso especifico de la etapa de análisis, se cuenta con un manejo de errores a lo largo de las tres fases que la componen, mencionados a continuación. La etapa de análisis, se compone de 3 fases principales: análisis léxico/morfológico, análisis sintáctico y análisis semántico.</c></p>
<p style="Normal" xid="15"><c></c></p>
<p style="Normal" xid="16"><c>Análisis léxico/morfológico</c></p>
<p style="Normal" xid="17"><c></c></p>
<p style="Normal" xid="18"><c>De manera general es una etapa de pre-procesamiento que con base en las reglas gramaticales del lenguaje en que esta escrito el programa (conjunto de lenguajes regulares) divide el programa fuente en componentes y a su vez realiza el tratamiento de comentarios y símbolos especiales y la eliminación de espacios. Esto quiere decir que, en esta etapa se prescinde de elementos irrelevantes para la lógica del programa y el código fuente es dividido en </c><c props="font-weight:bold">unidades sintácticas </c><c props="font-weight:normal">llamadas </c><c props="font-weight:bold">tokens</c><c props="font-weight:normal">, estos tokens se componen por un </c><c props="font-weight:bold">lexema</c><c props="font-weight:normal"> y su respectivo valor</c><c props="font-weight:bold">. </c><c props="font-weight:normal">Los lexemas son la unidad mínima de análisis en un código fuente y pertenecen a uno de los lenguajes del conjunto de lenguajes regulares que componen el lenguaje de programación. Un ejemplo de lexema se puede presentar como en la Fig. 2.a, de presentarse errores morfológicos en un lexema, en esta etapa de análisis se procede a corregir dicho error o a desplegar un mensaje de error. Estos lexemas son almacenados en la tabla de símbolos. Dentro de esta tabla de símbolos podemos encontrar elementos repetidos a lo largo de todos los registros, pues es imposible para el compilador conocer  cada uno de ellos. Como ya se ha mencionado, a cada lexema le corresponde un valor que lo distingue, a esta dupla de datos se le conoce como token (Fig.2.b.).</c></p>
<p style="Normal" xid="19"><c props="font-weight:normal"></c></p>
<p style="Normal" xid="20"><c props="font-weight:normal">El análisis morfológico se basa en las reglas de una gramática libre de contexto, por lo cual de forma practica se implementa como un autómata finito determinista.</c></p>
<p style="Normal" xid="21"><c props="font-weight:normal"></c></p>
<p style="Normal" xid="22"><c props="font-weight:normal"></c><c props="font-weight:normal"> </c><c props="font-family:Times New Roman; font-size:12pt; color:000000; text-decoration:none; text-position:normal; font-weight:normal; font-style:normal; lang:es-MX">Análisis</c><c props="font-weight:normal"> sintáctico</c></p>
<p style="Normal" xid="23"><c props="font-weight:normal"></c></p>
<p style="Normal" xid="24"><c props="font-weight:normal">Esta segunda fase del proceso de compilación del programa es la encargada de generar un árbol sintáctico a partir de los tokens obtenidos la fase del análisis léxico/morfológico, considerando estos como terminales del árbol. Con ello se evaluá cada sentencia del código fuente para corroborar su coherencia con respecto a las reglas del lenguaje de programación en el que esta escrito. A pesar de que dentro del diagrama de la arquitectura del compilador (Fig.1) suele representarse como una etapa previa al análisis semántico, en realidad durante esta se hace llamadas recurrentes al analizador semántico y a las subrutinas restantes, es por eso que esta fase es considerada fundamental dentro del proceso de compilación. La </c></p>
</section>
</abiword>
